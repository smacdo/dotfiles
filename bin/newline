#!/usr/bin/env python3
# vim: set ft=python
import typing
from enum import Enum
from pathlib import Path

import argparse
import io
import sys
import unittest

# TODO: Tests

DOS_LINE_ENDING = b"\r\n"
UNIX_LINE_ENDING = b"\n"


class UnsupportedLineEnding(Exception):
    def __init__(self, to_ending: "LineEnding"):
        super().__init__(
            f"The conversion could not be performed because the requested line ending {to_ending} is not supported",
        )


class UnknownLineEndingName(Exception):
    def __init__(self, ending_name: str):
        super().__init__(f"The line ending name '{ending_name}' was not recognized")


class CannotConvertAutoLineEnding(Exception):
    def __init__(self, to_ending: "LineEnding"):
        super().__init__(f"Cannot convert from mixed line ending to {to_ending}")


class LineEnding(Enum):
    dos = "dos"  # \r\n
    unix = "unix"  # \n
    mixed = "mixed"
    invalid = "invalid"

    def opposite(self):
        assert self != self.invalid

        if self == self.dos:
            return self.unix
        elif self == self.unix:
            return self.dos
        else:
            raise CannotConvertAutoLineEnding(self)

    @staticmethod
    def parse(s: str) -> "LineEnding":
        """Parses a string as a line ending name, and returns the corresponding LineEnding enum value."""
        if s == "dos":
            return LineEnding.dos
        elif s == "unix":
            return LineEnding.unix
        else:
            raise UnknownLineEndingName(s)


def detect_line(line: bytes) -> LineEnding:
    """Returns the line ending for then given line."""
    if line.endswith(DOS_LINE_ENDING):
        return LineEnding.dos
    elif line.endswith(UNIX_LINE_ENDING):
        return LineEnding.unix
    else:
        return LineEnding.invalid


def detect(file: io.BufferedReader | Path) -> LineEnding | None:
    """Detects the line end for the given file."""
    if isinstance(file, Path):
        file = open(file, "rb")

    mode = None

    for line in file:
        line_mode = detect_line(line)
        mode = line_mode if mode is None or mode == line_mode else LineEnding.mixed

    return mode


def convert(buffer: bytes, to_ending: LineEnding) -> bytes:
    """
    Converts the given buffer to the requested line ending.

    Args:
        buffer: The buffer to convert.
        to_ending: The line ending to convert to.

    Returns:
        A new buffer with the line endings converted to `to_ending`.
    """
    if to_ending == LineEnding.dos:
        return buffer.replace(UNIX_LINE_ENDING, DOS_LINE_ENDING)
    elif to_ending == LineEnding.unix:
        return buffer.replace(DOS_LINE_ENDING, UNIX_LINE_ENDING)
    else:
        raise UnsupportedLineEnding(to_ending)


def perform_convert(
    input_file: io.BufferedReader | Path,
    output_file: io.BufferedWriter | Path,
    to_ending: LineEnding,
) -> None:
    # Load the file to memory.
    if isinstance(input_file, Path):
        input_file = open(input_file, "rb")

    file_contents = input_file.read()

    # Convert the in-memory file buffer to the requested line ending.
    if to_ending == LineEnding.dos:
        file_contents = file_contents.replace(UNIX_LINE_ENDING, DOS_LINE_ENDING)
    else:
        file_contents = file_contents.replace(DOS_LINE_ENDING, UNIX_LINE_ENDING)

    # Write the converted buffer to disk.
    if isinstance(output_file, Path):
        with open(output_file, "wb") as file:
            file.write(file_contents)
    else:
        output_file.write(file_contents)


# ==============================================================================#
# main                                                                         #
# ==============================================================================#
def main() -> None:
    # Argument parsing
    #  - Read stdin or one or more input files.
    #  - Write stdout or one or more output files.
    args_parser = argparse.ArgumentParser(
        description="convert between dos and unix newlines"
    )

    group = args_parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "-c",
        "--convert",
        choices=["dos", "unix", "auto"],
        default="auto",
        help="Line ending to convert to",
    )
    group.add_argument(
        "-d",
        "--detect",
        action="store_true",
        help="Report the type of line endings used in file",
    )

    args_parser.add_argument(
        "inputs",
        nargs="*",
        type=argparse.FileType("rb"),
        default=[sys.stdin.buffer],
        help="Input file paths or '-' for stdin",
    )

    args = args_parser.parse_args()

    # Perform the user requested action (convert or explain) on input files.
    for input_reader in args.inputs:
        if args.detect:
            print(detect(input_reader))
        else:
            if args.convert == "auto":
                from_ending = detect(input_reader)
                to_ending = from_ending.opposite()
            else:
                to_ending = LineEnding.parse(args.convert)

            if input_reader == sys.stdin.buffer:
                print("hello there")
                perform_convert(input_reader, sys.stdout, to_ending)
            else:
                with open(f"{input_reader.name}", "wb") as output_file:
                    perform_convert(input_reader, output_file, to_ending)


if __name__ == "__main__":
    if "--run-tests" in sys.argv:
        sys.argv.remove("--run-tests")
        unittest.main()
    else:
        main()


# ==============================================================================#
# unit tests                                                                   #
# ==============================================================================#
class DetectLineEndingTests(unittest.TestCase):
    def test_dos(self):
        pass