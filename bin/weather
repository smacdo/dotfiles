#!/usr/bin/env python3
# vim: set ft=python

from __future__ import annotations
from typing import List, Optional, Union

from datetime import datetime, timedelta
from enum import Enum

import argparse
import json
import re
import urllib.request

# NOAA:
# https://www.weather.gov/documentation/services-web-api

# TODO: Cache results for faster lookups and offline use.
# TODO: Support name -> lat/long lookup (make sure to cache this too).
# TODO: Get alerts for a region
# https://api.weather.gov/alerts/active?area={state}
# TODO: Get air quality


class GridPoint:
    """Stores a NOAA "gridpoint" which describes a queryable weather region."""

    grid_id: str
    x: int
    y: int

    def __init__(self, grid_id: str, x: int, y: int) -> None:
        self.grid_id = grid_id
        self.x = x
        self.y = y

    @staticmethod
    def from_noaa_www_lat_long(lat: float, long: float) -> GridPoint:
        # TODO: Error handling eg invalid lat/long.
        response_bytes = urllib.request.urlopen(
            f"https://api.weather.gov/points/{lat},{long}"
        ).read()

        # TODO: Handle JSON decoding failures.
        # TODO: Check and handle if response is unexpected.
        response = json.loads(str(response_bytes, "utf-8"))
        props = response["properties"]

        return GridPoint(props["gridId"], int(props["gridX"]), int(props["gridY"]))


class TemperatureType(Enum):
    """Describes a unit of measurement for temperature"""

    f = "f"
    c = "c"

    @staticmethod
    def from_str(s: str) -> TemperatureType:
        """Reads a character 'f' or 'c' and converts it to `TemperatureType."""
        if s == "f" or s == "F":
            return TemperatureType.f
        elif s == "c" or s == "C":
            return TemperatureType.c
        else:
            assert False, f"Invalid temperature type {s}"


class Temperature:
    """Stores a temperature value and associated unit of measurement."""

    value: float
    _type: TemperatureType

    def __init__(self, value: float, _type: Union[str, TemperatureType]) -> None:
        self.value = value
        self._type = (
            _type
            if isinstance(_type, TemperatureType)
            else TemperatureType.from_str(_type)
        )

    @staticmethod
    def from_json(json: dict) -> Optional[Temperature]:
        """Reads a WMO temperature unit from { "value": ..., "unitCode": "wmoUnit:degC|degF" }"""
        if json["value"] is None:
            return None
        elif json["unitCode"] == "wmoUnit:degC":
            return Temperature(float(json["value"]), TemperatureType.c)
        elif json["unitCode"] == "wmoUnit:degF":
            return Temperature(float(json["value"]), TemperatureType.f)
        else:
            return None

    def __str__(self) -> str:
        c = "f" if self._type == TemperatureType.f else "c"
        return f"{self.value:.2g}Â°{c}"

    def f(self) -> Temperature:
        """Returns a copy of this temperature converted to f."""
        if self._type == TemperatureType.f:
            return Temperature(self.value, TemperatureType.f)
        else:
            return Temperature(self.value * 1.8 + 32.0, TemperatureType.f)

    def c(self) -> Temperature:
        """Returns a copy of this temperature converted to c."""
        if self._type == TemperatureType.f:
            return Temperature((self.value - 32.0) / 1.8, TemperatureType.c)
        else:
            return Temperature(self.value, TemperatureType.c)


class WindSpeed:
    """Stores a [minimum, maximum] wind speed as well as direction in mph."""

    min_speed: float
    max_speed: float
    direction: str

    def __init__(self, min_speed: float, max_speed: float, direction: str):
        self.min_speed = min_speed
        self.max_speed = max_speed
        self.direction = direction

    def __str__(self) -> str:
        if self.min_speed == self.max_speed:
            return f"{self.direction} {self.min_speed} mph"
        else:
            return f"{self.direction} {self.min_speed} to {self.max_speed} mph"

    @staticmethod
    def from_str(s: str, direction: str) -> Optional[WindSpeed]:
        regex = re.compile("^(?P<min_s>\\d+)( to (?P<max_s>\\d+))? mph$")
        matches = regex.match(s)

        if matches:
            min_s = matches.group("min_s")
            max_s = matches.group("max_s")

        if min_s and max_s:
            return WindSpeed(float(min_s), float(max_s), direction)
        else:
            return WindSpeed(float(min_s), float(min_s), direction)


def read_unit_percent(json: dict) -> Optional[float]:
    """Reads a WMO percent unit from { "value": 12.3, "unitCode": "wmoUnit:percent" }"""
    if json["value"] is None or json["unitCode"] != "wmoUnit:percent":
        return None
    else:
        return float(json["value"])


# TODO: Refactor into ForecastPeriod = Forecast + Start/End
class ForecastPeriod:
    """Weather forecast data for a period of time."""

    name: str
    start_time: datetime
    end_time: datetime
    is_daytime: Optional[bool]
    temperature: Temperature
    precip_chance: Optional[float]
    dewpoint: Optional[Temperature]
    relative_humidity: Optional[float]
    wind: Optional[WindSpeed]
    icon_url: str
    short_summary: str
    detailed_summary: str

    def __init__(self, json: dict) -> None:
        self.name = json["name"]
        self.start_time = datetime.fromisoformat(json["startTime"])
        self.end_time = datetime.fromisoformat(json["endTime"])
        self.is_daytime = bool(json["isDaytime"])
        self.temperature = Temperature(json["temperature"], json["temperatureUnit"])
        self.precip_chance = read_unit_percent(json["probabilityOfPrecipitation"])
        self.dewpoint = Temperature.from_json(json["dewpoint"])
        self.relative_humidity = read_unit_percent(json["relativeHumidity"])
        self.wind = WindSpeed.from_str(json["windSpeed"], json["windDirection"])
        self.icon_url = str(json["icon"])
        self.short_summary = str(json["shortForecast"])
        self.detailed_summary = str(json["detailedForecast"])

    def debug_print(self):
        print("ForecastPeriod")
        for p in vars(self).items():
            print(f"\t{p}")


class Forecast:
    forecast_periods: List[ForecastPeriod]

    def __init__(self, forecast_periods: List[ForecastPeriod]):
        self.forecast_periods = forecast_periods

    def add(self, forecast_period: ForecastPeriod) -> None:
        self.forecast_periods.append(forecast_period)

    def day(self, num_days_from_today: int) -> List[ForecastPeriod]:
        """Get all forecast periods (usually day, night) for the day that is `num_days_from_today`
        ahead of today."""

        # Calculate the start of the requested day.
        now = datetime.now().astimezone()
        day_start = datetime(now.year, now.month, now.day).astimezone() + timedelta(
            days=num_days_from_today
        )

        # Find all forecast periods falling within the requested day.
        forecast_periods: List[ForecastPeriod] = []

        for p in self.forecast_periods:
            if (
                p.start_time.year == day_start.year
                and p.start_time.month == day_start.month
                and p.start_time.day == day_start.day
            ):
                forecast_periods.append(p)

        # Ensure the returned list has periods sorted in ascending order
        # (the earliest period is first)
        sorted(forecast_periods, key=lambda x: x.start_time)
        return forecast_periods

    def today(self) -> Optional[ForecastPeriod]:
        for p in self.forecast_periods:
            if p.name == "Today":
                return p
        return None

    def tonight(self) -> Optional[ForecastPeriod]:
        for p in self.forecast_periods:
            if p.name == "Tonight":
                return p
        return None


def lookup_forecast(location: GridPoint) -> Forecast:
    # TODO: Error handling eg invalid lat/long.
    url = f"https://api.weather.gov/gridpoints/{location.grid_id}/{location.x},{location.y}/forecast"
    response_bytes = urllib.request.urlopen(url).read()

    # TODO: Handle JSON decoding failures.
    # TODO: Check and handle if response is unexpected.
    response = json.loads(str(response_bytes, "utf-8"))

    # TODO: capture remainder of fields and encapsulate into class:
    #props = response["properties"]
    #generated_at = props["generatedAt"]  # "2023-09-19T17:52:33+00:00",
    #update_time = props["updateTime"]  # ^^^^
    #valid_time = props["validTimes"]  # "2023-09-19T11:00:00+00:00/P7DT14H"
    #elevation = props["elevation"]["value"]  # 456.8951999
    # also unitCode = "wmoUnit:m" along with value

    forecasts: List[ForecastPeriod] = []

    for p in response["properties"]["periods"]:
        forecasts.append(ForecastPeriod(p))

    return Forecast(forecasts)


def print_summary(forecast_period):
    print(f"""\n{forecast_period.name}:\n{forecast_period.detailed_summary}""")


def main():
    # Parse command line options.
    args_parser = argparse.ArgumentParser(description="does neat stuff")

    args_parser.add_argument("time_period_or_action", nargs="?", default="now")
    args_parser.add_argument("-l", "--location")
    args_parser.add_argument("--cache_time_secs", default=10 * 60)

    args = args_parser.parse_args()

    # Get weather forecast for region.
    forecasts = lookup_forecast(GridPoint.from_noaa_www_lat_long(47.675, -122.1215))

    # Print forecast information depending on what user asked for.
    if args.time_period_or_action == "now":
        if forecasts.today():
            print_summary(forecasts.today())

        if forecasts.tonight():
            print_summary(forecasts.tonight())

        # Print the first forecast period of tomorrow.
        tomorrow_forecasts = forecasts.day(1)

        if len(tomorrow_forecasts) > 0:
            print_summary(tomorrow_forecasts[0])
    elif args.time_period_or_action == "tomorrow":
        for period in forecasts.day(1):
            print_summary(period)
    else:
        print(f"*** unknown time period or action: {args.time_period_or_action} ***")


if __name__ == "__main__":
    main()
