#!/bin/sh
# Author: Scott MacDonald
# Purpose: Run vscode and variants the same way across multiple platforms.
#
# Run with `-h` or see `print_help()` for more information.
################################################################################
. "$S_DOTFILE_ROOT"/sh/cli.sh

################################################################################
# Print usage (help) text.
################################################################################
print_help() {
  echo "Run vscode and variants the same way across multiple platforms."
  echo 
  echo "code [-v] [-F|-V] -- vscode args..."
  echo " Arguments:"
  echo "  -h   Show this help text."
  echo "  -C   Only search vscode paths (e.g., do not use code-fb)."
  echo "  -F   Only search code-fb paths."
  echo "  -V   Enable verbose mode."
  echo 
  echo " This script supports fb-code in addition to vscode, which is a special"
  echo " Facebook maintained fork of Microsoft's vscode. No proprietary"
  echo " information is included in this script."
  echo 
  echo " You can see more information on this fork here:"
  echo " https://github.com/facebookexperimental/fb-vscode"
}

################################################################################
# Run vscode binary with parameters if the given binary path is executable.
#
# Arguments:
#  $1     path to a potential vscode binary.
#  $2..N  arguments to pass to the vscode binary, if it exists.
#
# Returns 0 if vscode was found and executed successfully, and 0 if the vscode
# binary was not found. If vscode was found but did not exit succesfully this
# process will be terminated with the error code returned by vscode.
################################################################################
run_if_found() {
  vscode_path="$1"
  shift # Remove first argument (vscode path) from arguments list.

  if [ -x "$vscode_path" ]; then
    verbose "run: " "$vscode_path" "$@"

    "$vscode_path" "$@"

    if "$vscode_path" "$@" ; then
      # Nothing, it worked fine!
      true # ... but you can't have an empty clause so use 'true'.
    else
      exit_with_message "$?" \
        "ERROR: Got error code $? when launching vscode '$vscode_path'"
    fi

    return 0
  else
    verbose "Not found: $vscode_path"
  fi

  # Not found, return 1 to indicate failure.
  return 1
}

################################################################################
# Try to run vscode-fb with the given parameters by searching commonly used
# installation locations.
#
# Arguments:
#  $1..N  arguments to pass to the vscode binary.
#
# Returns 0 if vscode-fb was found and executed successfully, otherwise 1.
################################################################################
run_fbcode() {
  run_if_found "/usr/bin/code-fb" "$@" && return 0
  run_if_found "/Applications/VS Code @ FB.app/Contents/Resources/app/bin/code" "$@" && return 0

  verbose "fb vscode not found"

  return 1
}

###############################################################################
# Try to run vscode with the given parameters by searching commonly used
# installation locations.
#
# Arguments:
#  $1..N  arguments to pass to the vscode binary.
#
# Returns 0 if vscode was found and executed successfully, otherwise 1.
################################################################################
run_vscode() {
  run_if_found "/usr/bin/code" "$@" && return 0
  run_if_found "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" "$@" && return 0

  verbose "vscode not found"

  return 1
}

###############################################################################
# Use a non-vscode editor as a default fallback.
#
# Arguments:
#  $1..N  arguments to pass to the vscode binary.
#
# Returns 0 if a fallback editor was found and executed successfully,
# otherwise 1.
################################################################################
run_fallback() {
  # Try Sublime Text first as that's still a GUI editor.
  run_if_found "/usr/local/bin/subl" "$@" && return 0
  run_if_found "/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl" "$@" && return 0

  # Try using $VISUAL or $EDITOR as a last resort.
  run_if_found "$(which "$VISUAL")" "$@" && return 0
  run_if_found "$(which "$EDITOR")" "$@" && return 0

  verbose "no fallback editors found"

  return 1
}

################################################################################
# Run vscode-fb/vscode if it exists on the system.
# 
# Globals:
#  VERBOSE
#
# Arguments:
#  $1..N  arguments to pass to the vscode binary.
#
# Returns 0 if vscode was found and executed successfully, and 0 if the vscode
# binary was not found. If vscode was found but did not exit succesfully this
# process will be terminated with the error code returned by vscode.
################################################################################
main() {
  if [ "$USE_FB" -eq 1 ]; then
    run_fbcode "$@" && return 0
  else
    verbose "USE_FB not set, skipping fb code"
  fi 

  if [ "$USE_MSFT" -eq 1 ]; then
    run_vscode "$@" && return 0
  else
    verbose "USE_MSFT not set, skipping msft code"
  fi

  # No suitable vscode found.
  run_fallback "$@"
}

#===============================================================================
# Script entry point.                                                          #
#===============================================================================
USE_FB=1
USE_MSFT=1

while getopts ':hVCF' OPTION
do 
  case "$OPTION" in
    h) print_help
       exit 2
       ;;
    V) set_verbose 1
       ;;
    F) USE_MSFT=0
       ;;
    C) USE_FB=0
       ;;
    *) # Invalid options are ignored and passed to vscode.
       ;;
  esac
done

# Remove parsed arguments.
# NOTE: For this to work the script's arguments must be specified before the
# arguments for vscode!
shift "$((OPTIND - 1))"

# Now start execution of main.
main "$@"
