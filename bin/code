#!/usr/bin/env python3
# vim: set filetype=python
# Author: Scott MacDonald
# Purpose: Run vscode and variants the same way across multiple platforms.
#
# Unrecognized arguments are passed to the invoked editor command. Arguments
# can also be passed to the editor by using `--`.
#
# This script supports fb-code in addition to vscode, which is a special
# Facebook maintained fork of Microsoft's vscode. No proprietary information
# is included in this script.
#
# You can see more information on this fork here:
# https://github.com/facebookexperimental/fb-vscode
################################################################################
import argparse
import logging
import os
import shutil
import subprocess
import sys


logger = logging.getLogger(__name__)

FB_CODE_NAME = "fbcode"
VS_CODE_NAME = "vscode"
SUBLIME_NAME = "sublime"
FALLBACK_NAME = "fallback"

APP_PATHS: dict[str, list[str | None]] = {
    FB_CODE_NAME: [
        "/usr/bin/code-fb",
        "/Applications/VS Code @ FB.app/Contents/Resources/app/bin/code",
        "/usr/local/bin/code" if "FBVSCODE_REMOTE_ENV_NAME" in os.environ else None,
    ],
    VS_CODE_NAME: [
        "/usr/bin/code",
        "/usr/share/code/bin/code",
        "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code",
    ],
    SUBLIME_NAME: [
        "/usr/local/bin/subl",
        "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl",
    ],
    FALLBACK_NAME: [
        f'{shutil.which(os.environ["VISUAL"])}' if "VISUAL" in os.environ else None,
        f'{shutil.which(os.environ["EDITOR"])}' if "EDITOR" in os.environ else None,
    ],
}

APP_ORDER = [FB_CODE_NAME, VS_CODE_NAME, SUBLIME_NAME, FALLBACK_NAME]


def main() -> None:
    """Application entry point."""
    parser = argparse.ArgumentParser(
        description="Run vscode or its clones from the command line.",
        epilog="Any unrecognized arguments and anything after `--` are passed to the editor.",
    )

    parser.add_argument(
        "--check", action="store_true", help="check which paths are valid"
    )
    parser.add_argument("--verbose", action="store_true", help="enable verbose output")

    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "--vscode", action="store_true", help="use vs-code and skip fb-code paths"
    )
    group.add_argument(
        "--fb", action="store_true", help="use fb-code and skip vscode paths"
    )

    args, extra_args = parser.parse_known_args()

    if args.verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.WARNING)

    apps_to_try = APP_ORDER

    if args.vscode:
        apps_to_try.remove(FB_CODE_NAME)

    if args.fb:
        apps_to_try.remove(VS_CODE_NAME)

    did_find_runnable = try_running_any_in_order(apps_to_try, extra_args, args.check)

    if not args.check and not did_find_runnable:
        logging.error("no editors were found :(")
        sys.exit(1)


def try_running_any_in_order(apps: list[str], extra_args, check=False) -> bool:
    """
    Iterates through a list of paths grouped by application name and returns
    after executing the first path that exists.

    Args:
        apps: A list of application names to try. Each name must be a key in `APP_PATHS`.
        extra_args: Additional arguments that should be passed to the executable when run.
        check: True if the paths should be checked rather than attempting to run.

    Returns:
        True if a path was found and successfully executed, false otherwise.
    """
    for app in apps:
        paths = APP_PATHS[app]

        for path in paths:
            if path is None:
                continue

            if check:
                check_path(app, path, stdout=True)
            elif run_if_found(app, path, extra_args):
                logging.debug(f"ran {path} successfully")
                return True
            else:
                logging.debug(f"{app} not found")

    return False


def run_if_found(name: str, path: str, args: list[str]) -> bool:
    """
    Tries to run the executable file given in `path`.

    Args:
        name: Name of the application referred to by `path`.
        path: Path to an executable file.
        args: List of arguments to pass to the executable.

    Returns:
        True if the executable file was run successfully, false otherwise.
    """
    if not check_path(name, path):
        return False

    logger.debug(f"will try {name} path: {path}")
    subprocess.run([path] + args)

    return True


def check_path(name: str, path: str, stdout: bool = False):
    """
    Check if the given path exists and is executable.

    Args:
        name: Name of the application referred to by `path`.
        path: Path to an executable file.
        stdout: Prints check output to stdout if set to `True`.

    Returns:
        True if the file exists and is executable, otherwise returns false.
    """
    if not os.path.exists(path):
        logger.debug(f"{name} path not found: {path}")

        if stdout:
            print(f"{name} {path}: NOT FOUND")

        return False

    if not os.access(path, os.X_OK):
        logger.warning(f"{name} path exists but is not executable: {path}")

        if stdout:
            print(f"{name} {path}: NOT EXECUTABLE")

        return False

    if stdout:
        print(f"{name} {path}: OK")

    return True


if __name__ == "__main__":
    main()