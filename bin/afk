#!/bin/sh
# Author: Scott MacDonald
# Purpose: Lock the desktop screen and require a password to unlock.
. "$S_DOTFILE_ROOT"/shell_profile/functions.sh
. "$S_DOTFILE_ROOT"/sh/cli.sh

print_help() {
  echo "Cross platform tool to lock the current desktop session."
  echo "Usage: $(basename $0) [-V]"
}

main() {
  # Tool option parsing.
  while getopts 'hV' opt; do
    case "$opt" in
      h) print_help
         exit 1
         ;;
      V) set_verbose 1
         ;;
      ?) print_help
         exit 2
         ;;
     esac
  done

  # Try to use a native tool to lock the screen before using a platform
  # specific invocation.
  if command -v screenlocker &> /dev/null; then
    verbose "using screenlocker to lock the screen"
    screenlocker
  else
    verbose "screenlocker not present"

    if is_osx ; then
      # Emulate a screen lock by telling the display to go to sleep. If the
      # password prompt is not displayed, set the lock timeout to zero in
      # System Preferences -> Security & Privacy -> General
      #
      # Ref: https://apple.stackexchange.com/q/80058
      # Can also use `pmset displaysleepnow` but unsure of technical differences.
      verbose "Using fallback emulation"
      pmset sleepnow
    else
      # TODO: Implement Linux, Windows.
      exit_with_message 2 "This platform is not supported yet"
    fi
  fi
}

main "$@"
