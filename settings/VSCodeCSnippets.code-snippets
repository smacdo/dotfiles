{
	// Shorthands for preprocessor
	"#include": {
		"scope": "c, cpp",
		"prefix": [
			"#in",
			"#inc"
		],
		"body": [
			"#include $0"
		],
		"description": "#include shorthand (with < or \" for code completion)"
	},
	"#pragma once": {
		"scope": "c, cpp",
		"prefix": "#po",
		"body": [
			"#pragma once",
			"$0"
		],
	},
	"#if block": {
		"scope": "c, cpp",
		"prefix": "#if",
		"body": [
			"#if ${1:expresssion}",
			"$0",
			"#endif // $1"
		],
		"description": "#if block"
	},
	"#if #else block": {
		"scope": "c, cpp",
		"prefix": "#ife",
		"body": [
			"#if ${1:expresssion}",
			"$0",
			"#else // !$1",
			"",
			"#endif // $1"
		],
		"description": "#if block"
	},
	"#ifdef block": {
		"scope": "c, cpp",
		"prefix": [
			"#ifdef"
		],
		"body": [
			"#ifdef ${1:expresssion}",
			"$0",
			"#endif // $1"
		],
		"description": "#if block"
	},
	"#ifdef #else block": {
		"scope": "c, cpp",
		"prefix": [
			"#ifdefe"
		],
		"body": [
			"#ifdef ${1:expresssion}",
			"$0",
			"#else // !$1",
			"",
			"#endif // $1"
		],
		"description": "#if block"
	},
	"C ifndef block": {
		"scope": "c, cpp",
		"prefix": [
			"#ifnd",
			"#ifndef"
		],
		"body": [
			"#ifndef ${1:expresssion}",
			"$0",
			"#endif // !$1"
		],
		"description": "#ifndef block"
	},
	// C++ helpers
	"using namespace NAME": {
		"scope": "cpp",
		"prefix": [
			"usingns"
		],
		"body": [
			"using namespace $0"
		],
	},
	"namespace NAME { ... }": {
		"scope": "cpp",
		"prefix": [
			"ns",
			"namespace"
		],
		"body": [
			"namespace ${1:name} {",
			"\t$0",
			"} // namespace $1"
		],
	},
	"anonymous namespace { ... }": {
		"scope": "cpp",
		"prefix": [
			"nsa"
		],
		"body": [
			"namespace {",
			"\t$0",
			"}"
		],
	},
	"std::cout << ... << std::endl;": {
		"scope": "cpp",
		"prefix": "cout",
		"body": [
			"std::cout << $0 << std::endl;"
		],
	},
	"std::cerr << ... << std::endl;": {
		"scope": "cpp",
		"prefix": "cerr",
		"body": [
			"std::cerr << $0 << std::endl;"
		],
	},
	"std::cin << ...": {
		"scope": "cpp",
		"prefix": "cin",
		"body": [
			"std::cin << "
		],
	},
	"std::begin(C), std::end(C)": {
		"scope": "cpp",
		"prefix": "beginend",
		"body": [
			"std::begin(${1:container}), std::end(${1})"
		],
	},
	"try { ... } catch (exception) { ... }": {
		"scope": "cpp",
		"prefix": "try",
		"body": [
			"try {",
			"\t$0",
			"}",
			"catch(${1:const std::exception& e}) {",
			"\t// TODO: handle exception...",
			"}"
		],
	},
	// C++ Type shorthands.
	"std::unique_ptr<T> var": {
		"scope": "cpp",
		"prefix": "uptr",
		"body": [
			"std::unique_ptr<${1:T}> ${2:var}"
		],
	},
	"std::shared_ptr<T> var": {
		"scope": "cpp",
		"prefix": "sptr",
		"body": [
			"std::shared_ptr<${1:T}> ${2:var}"
		],
	},
	// C++ helpers
	"for (int i = X; i < Y; ++i) { ... }": {
		"scope": "c, cpp",
		"prefix": "fori",
		"body": [
			"for (${1:int} ${2:i} = ${3:0}; $2 < $4; ${5:++$2}) {",
			"\t$0",
			"}",
		],
	},
	"for (auto& x : collection) { ... }": {
		"scope": "cpp",
		"prefix": "fora",
		"body": [
			"for (auto ${1:x} : ${2:collection}) {",
			"\t$0",
			"}",
		],
	},
	"for (const auto x : collection) { ... }": {
		"scope": "cpp",
		"prefix": "forca",
		"body": [
			"for (const auto ${1:x} : ${2:collection}) {",
			"\t$0",
			"}",
		],
	},
	"for (const auto& x : collection) { ... }": {
		"scope": "cpp",
		"prefix": "forra",
		"body": [
			"for (auto& ${1:x} : ${2:collection}) {",
			"\t$0",
			"}",
		],
	},
	"std::make_unique<T>(...)": {
		"scope": "cpp",
		"prefix": "makeuptr",
		"body": [
			"std::make_unique<${1:T}>($2)"
		],
	},
	"auto var = std::make_unique<T>(...);": {
		"scope": "cpp",
		"prefix": "amakeuptr",
		"body": [
			"auto ${1:var} = std::make_unique<${2:T}>($3);"
		],
	},
	"std::make_shared<T>(...)": {
		"scope": "cpp",
		"prefix": "makesptr",
		"body": [
			"std::make_shared<${1:T}>($2)"
		],
	},
	"auto var = std::make_shared<T>(...);": {
		"scope": "cpp",
		"prefix": "amakesptr",
		"body": [
			"auto ${1:var} = std::make_shared<${2:T}>($3);"
		],
	},
	// Casts.
	"static_cast<T>(...)": {
		"scope": "cpp",
		"prefix": [
			"scast",
			"staticcast",
			"static_cast"
		],
		"body": [
			"static_cast<${1:T}>($2:expr)"
		],
	},
	"reinterpret_cast<T>(...)": {
		"scope": "cpp",
		"prefix": [
			"rcast",
			"reinterpretcast",
			"reinterpret_cast"
		],
		"body": [
			"reinterpret_cast<${1:T}>(${2:expr})"
		],
	},
	"dynamic_cast<T>(...)": {
		"scope": "cpp",
		"prefix": [
			"dcast",
			"dynamiccast",
			"dynamic_cast"
		],
		"body": [
			"dynamic_cast<${1:T}>(${2:expr})"
		],
	},
	"const_cast<T>(...)": {
		"scope": "cpp",
		"prefix": [
			"ccast",
			"constcast",
			"const_cast"
		],
		"body": [
			"const_cast<${1:T}>(${2:expr})"
		],
	},
	// Lambda
	"[capture](params) {...}": {
		"scope": "cpp",
		"prefix": "lambda",
		"body": [
			"[${1:captures}](${2:params}) { $0 }${3:;}"
		],
	},
	"multiline [capture](params) {...}": {
		"scope": "cpp",
		"prefix": "lambdam",
		"body": [
			"[${1:captures}](${2:params}){",
			"\t$0",
			"}${3:;}"
		],
	},
	// fmt format library:
	"include <fmt/core.h>": {
		"scope": "cpp",
		"prefix": "#ifmt",
		"body": [
			"#include <fmt/core.h>"
		],
	},
	"fmt::format(...)": {
		"scope": "cpp",
		"prefix": "fmtf",
		"body": [
			"fmt::format($0)"
		],
	},
	// Documentation:
	"doxygen /** ... */": {
		"scope": "c, cpp",
		"prefix": "/**",
		"body": [
			"/** $1 */"
		],
		"description": "/** ... */"
	},
	"doxygen multi-line /** ... */": {
		"scope": "c, cpp",
		"prefix": "/***",
		"body": [
			"/**",
			" * $1",
			" */$0"
		],
	},
	// Type shortcuts:
	"array<T, N>": {
		"scope": "cpp",
		"prefix": "array",
		"body": [
			"std::array<${1:type}, ${2:N}>"
		],
	},
	"std::vector<T>": {
		"scope": "cpp",
		"prefix": "vector",
		"body": [
			"std::vector<${1:type}>"
		],
	},
	"std::map<K, T>": {
		"scope": "cpp",
		"prefix": "map",
		"body": [
			"std::map<${1:key_type}, ${2:value_type}>"
		],
	},
	"std::deque<T>": {
		"scope": "cpp",
		"prefix": "deque",
		"body": [
			"std::deque<${1:type}>"
		],
	},
	"std::queue<T>": {
		"scope": "cpp",
		"prefix": "queue",
		"body": [
			"std::queue<${1:type}>"
		],
	},
	"std::priority_queue<T>": {
		"scope": "cpp",
		"prefix": [
			"pqueue",
			"priority_queue"
		],
		"body": [
			"std::priority_queue<${1:type}>"
		],
	},
	"std::unordered_map<K, T>": {
		"scope": "cpp",
		"prefix": "unordered_map",
		"body": [
			"std::unordered_map<${1:key_type}, ${2:value_type}>"
		],
	},
	"std::wstring": {
		"scope": "cpp",
		"prefix": "wstring",
		"body": [
			"std::wstring"
		],
	},
	"std::string": {
		"scope": "cpp",
		"prefix": "string",
		"body": [
			"std::string"
		],
	},
	"std::string_view": {
		"scope": "cpp",
		"prefix": [
			"strv",
			"stringview"
		],
		"body": [
			"std::string_view"
		],
	},
	"uint8_t": {
		"scope": "c, cpp",
		"prefix": "u8",
		"body": [
			"uint8_t"
		],
	},
	"uint16_t": {
		"scope": "c, cpp",
		"prefix": "u16",
		"body": [
			"uint16_t"
		],
	},
	"uint32_t": {
		"scope": "c, cpp",
		"prefix": "u32",
		"body": [
			"uint32_t"
		],
	},
	"uint64_t": {
		"scope": "c, cpp",
		"prefix": "u64",
		"body": [
			"uint64_t"
		],
	},
	"int8_t": {
		"scope": "c, cpp",
		"prefix": "i8",
		"body": [
			"int8_t"
		],
	},
	"i16": {
		"scope": "c, cpp",
		"prefix": "i16",
		"body": [
			"int16_t"
		],
		"description": "int16_t"
	},
	"int32_t": {
		"scope": "c, cpp",
		"prefix": "i32",
		"body": [
			"int32_t"
		],
	},
	"int64_t": {
		"scope": "c, cpp",
		"prefix": "i64",
		"body": [
			"int64_t"
		],
	},
	"uintptr_t": {
		"scope": "c, cpp",
		"prefix": [
			"uiptr"
		],
		"body": [
			"uintptr_t"
		],
	},
	// Common header shorthands
	"#include <array>": {
		"scope": "cpp",
		"prefix": "#incarr",
		"body": [
			"#include <array>"
		],
	},
	"#include <format>": {
		"scope": "cpp",
		"prefix": "#incform",
		"body": [
			"#include <fmt/format.h>"
		],
	},
	"#include <functional>": {
		"scope": "cpp",
		"prefix": "#incfunc",
		"body": [
			"#include <functional>"
		],
	},
	"#include <map>": {
		"scope": "cpp",
		"prefix": "#incmap",
		"body": [
			"#include <map>"
		],
	},
	"#include <memory>": {
		"scope": "cpp",
		"prefix": "#incmem",
		"body": [
			"#include <memory>"
		],
	},
	"#include <string>": {
		"scope": "cpp",
		"prefix": "#incstr",
		"body": [
			"#include <string>"
		],
	},
	"#include <string_view>": {
		"scope": "cpp",
		"prefix": "#inctringv",
		"body": [
			"#include <string_view>"
		],
	},
	"#include <tuple>": {
		"scope": "cpp",
		"prefix": "#inctuple",
		"body": [
			"#include <tuple>"
		],
	},
	"#include <unordered_map>": {
		"scope": "cpp",
		"prefix": "#incuno",
		"body": [
			"#include <unordered_map>"
		],
	},
	"#include <vector>": {
		"scope": "cpp",
		"prefix": "#incvec",
		"body": [
			"#include <vector>"
		],
	},
	// GTest macros:
	"GTest File Template": {
		"scope": "cpp",
		"prefix": "//gt",
		"body": [
			"// COPYRIGHT HERE",
			"#include \"${1:FILE_UNDER_TEST.h}\"",
			"",
			"#include <gmock/gmock.h>",
			"#include <gtest/gtest.h>",
			"",
			"TEST(${2:TestName}) {",
			"\t$0",
			"}"
		],
	},
	"GTest TEST(NAME) { ... }": {
		"scope": "cpp",
		"prefix": [
			"gtestt"
		],
		"body": [
			"TEST(${1:TestName}) {",
			"\t$0",
			"}"
		],
	},
	"GTest TEST_F(F,N) { ... } ": {
		"scope": "cpp",
		"prefix": [
			"gtestf"
		],
		"body": [
			"TEST_F(${1:FixtureName}, ${2:TestName}) {",
			"\t$0",
			"}"
		],
		"description": "GTest TEST_F"
	},
	"EXPECT_EQ": {
		"scope": "cpp",
		"prefix": [
			"expecteq"
		],
		"body": [
			"EXPECT_EQ($1, $2);"
		],
	},
	"EXPECT_NE": {
		"scope": "cpp",
		"prefix": [
			"expectne"
		],
		"body": [
			"EXPECT_NE($1, $2);"
		],
	},
	"ASSERT_EQ": {
		"scope": "cpp",
		"prefix": [
			"asserteq"
		],
		"body": [
			"ASSERT_EQ($1, $2);"
		],
	},
	"ASSERT_NE": {
		"scope": "cpp",
		"prefix": [
			"assertne",
		],
		"body": [
			"ASSERT_NE($1, $2);"
		],
	},
}
